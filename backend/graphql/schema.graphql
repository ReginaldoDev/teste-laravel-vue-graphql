"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-01-01 13:00:00`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

type Query {
    users: [User!]! @paginate(type: "paginator" model: "App\\User")
    user(id: ID @eq): User @find(model: "App\\User")

    books: [Book] @all
    book(id: ID @eq): Book @find
    booksByFeatured(featured: Boolean! @eq): [Book] @all
    someComplexQuery(search: String!): [Book]

    categories: [Category] @all
    category(id: ID @eq): Category @find

    me: User @middleware(checks:["auth:api"]) @auth

    modules: [Modules] @all

    userCategorys: [UserCategorys] @all
    buscaComplexQuery(user_id: Int!): [UserCategorys]
}

type Mutation {

    createUser(
        name: String @rules(apply: ["required"])
        email: String @rules(apply: ["required","email","unique:users,email"])
        password: String! @rules(apply: ["min:6"]) @bcrypt
    ): User @create(model: "App\\User")
    updateUser(
        id: ID @rules(apply: ["required"])
        name: String
        email: String @rules(apply: ["email"])
    ): User @update(model: "App\\User")
    deleteUser(
        id: ID @rules(apply: ["required"])
    ): User @delete(model: "App\\User")

    createCategory(
        name: String @rules(apply: ["required","unique:categories,name"])
    ): Category @create(model: "App\\Category")@middleware(checks:["auth:api"])
    updateCategory(
        id: ID @rules(apply: ["required"])
        name: String @rules(apply: ["required","unique:categories,name"])
    ): Category @update(model: "App\\Category")@middleware(checks:["auth:api"])
    deleteCategory(
        id: ID! @rules(apply: ["required"])
    ): Category @delete(model: "App\\Category")@middleware(checks:["auth:api"])

    createBook(
        title: String! @rules(apply: ["required"])
        author: String! @rules(apply: ["required"])
        image: String
        link: String
        description: String 
        featured: Boolean 
        category_id: Int!
    ): Book @create(model: "App\\Book")@middleware(checks:["auth:api"])
    updateBook(
        id: ID @rules(apply: ["required"])
        title: String! @rules(apply: ["required"])
        author: String! @rules(apply: ["required"])
        image: String
        link: String
        description: String 
        featured: Boolean 
        category_id: Int!
    ): Book @update(model: "App\\Book")@middleware(checks:["auth:api"])
    deleteBook(
        id: ID! @rules(apply: ["required"])
    ): Book @delete(model: "App\\Book")@middleware(checks:["auth:api"])

}

type User {
    id: ID!
    name: String!
    email: String!
    created_at: DateTime!
    updated_at: DateTime!
}

type Category {
    id: ID!
    name: String!
    books: [Book] @hasMany
}

type Book {
    id: ID!
    title: String!
    author: String!
    image: String
    link: String
    description: String
    featured: Boolean
    category: Category! @belongsTo
}

type Modules {
    id: ID!
    name: String!
    category: Category! @belongsTo
}

type UserCategorys {
    user: User! @belongsTo
    category: Category! @belongsTo
}